---
title: "hw2"
format: html
editor: visual
---

# Github:

<https://github.com/yyhken/stats-506/blob/main/hw2.qmd>

# **Problem 1 - Dice Game**

## a.

```{r}
#' Dice game version 1 - using a loop
#' @param n Number of plays to make
#' @return Total won/lost
play1 <- function(n){
  if(n < 1){
    return (0)
  }
  die <- sample(1:6, n, replace = T)
  sum <- 0
  for (i in 1:n){
    sum = sum - 2
    if (die[i] == 3 || die[i] == 5){
      sum <- sum + 2*die[i]
    }
  }
  return (sum)
}
```

```{r}
#' Dice game version 2 - using vectorized functions
#' @param n Number of plays to make
#' @return Total won/lost
play2 <- function(n){
  if(n < 1){
    return (0)
  }
  die <- sample(1:6, n, replace = T)
  winnings <- rep(-2, n)  
  winnings[die == 3] <- (2 * 3) - 2  
  winnings[die == 5] <- (2 * 5) - 2  
  
  total <- sum(winnings)
  return(total)
}
```

```{r}
#' Dice game version 3 - using table()
#' @param n Number of plays to make
#' @return Total won/lost
play3 <- function(n){
  if (n < 1) {
    return(0)
  }
  die <- sample(1:6, n, replace = TRUE)
  counts <- table(die)
  total <- -2 * n  
  if ("3" %in% names(counts)) {
    total <- total + counts["3"] * (2 * 3)
  }
  if ("5" %in% names(counts)) {
    total <- total + counts["5"] * (2 * 5)
  }
  return(total)
}
```

```{r}
#' Dice game version 4 - using sapply()
#' @param n Number of plays to make
#' @return Total won/lost
play4 <- function(n) {
  if (n < 1) {
    return(0)
  }
  die <- sample(1:6, n, replace = TRUE)
  winnings <- sapply(die, function(x) {
    if (x == 3 || x == 5) {
      return((2 * x) - 2)
    } else {
      return(-2)
    }
  })
  total <- sum(winnings)
  return(total)
}
```

## b.

```{r}
num_runs <- 3
inputs <- c(3, 3000)

functions <- list(
  play1 = play1,
  play2 = play2,
  play3 = play3,
  play4 = play4
)

for (func_name in names(functions)) {
  func <- functions[[func_name]]
  cat("Testing", func_name, "\n")
  
  for (n in inputs) {
    cat("Input n =", n, "\n")
    for (i in 1:num_runs) {
      result <- func(n)
      cat("Run", i, "Result:", result, "\n")
    }
    cat("\n")
  }
  cat("\n")
}

```

## c.

```{r}
# Define a function to test all four versions and compare the results
test_dice_games <- function(n) {
  cat("Testing with n =", n, "\n")
  
  # Set the same seed for all versions
  set.seed(123)
  result1 <- play1(n)
  
  set.seed(123)
  result2 <- play2(n)
  
  set.seed(123)
  result3 <- play3(n)
  
  set.seed(123)
  result4 <- play4(n)
  
  # Display the results from all versions
  cat("Version 1 result:", result1, "\n")
  cat("Version 2 result:", result2, "\n")
  cat("Version 3 result:", result3, "\n")
  cat("Version 4 result:", result4, "\n")
  
  # Verify that all results are the same
  if (result1 == result2 && result2 == result3 && result3 == result4) {
    cat("All versions produce the same result!\n\n")
  } else {
    cat("Mismatch in results!\n\n")
  }
}

# Test with n = 3
test_dice_games(3)

# Test with n = 3000
test_dice_games(3000)


```

## d.

```{r}
library(microbenchmark)
```

```{r}

benchmark_dice_games <- function(n) {
  cat("Benchmarking with n =", n, "\n")
  
  benchmark_results <- microbenchmark(
    play1 = play1(n),
    play2 = play2(n),
    play3 = play3(n),
    play4 = play4(n),
    times = 10  
  )
  
  print(summary(benchmark_results))
  
  boxplot(benchmark_results)
}

# Test with n = 1,000 (low input)
benchmark_dice_games(1000)

# Test with n = 100,000 (large input)
benchmark_dice_games(100000)

```

## e.

```{r}
reps <- 10000
save <- vector(length = reps)

for (i in 1:reps) {
  save[i] <- play2(1000)  # Use the fastest version, play2
}

hist(save, main = "Monte Carlo Simulation of Dice Game Winnings", 
     xlab = "Total Winnings", col = "lightblue", border = "black", breaks = 30)


abline(v = mean(save), col = "red", lwd = 2)

```

From the histogram, it looks very fair.

# **Problem 2 - Linear Regression**

## a.

```{r}
library(dplyr)
library(ggplot2)

cars <- read.csv("cars.csv")

names(cars)
```

```{r}
new_colnames <- c(
  "Height",          # Dimensions.Height
  "Length",          # Dimensions.Length
  "Width",           # Dimensions.Width
  "Driveline",       # Engine.Information.Driveline
  "EngineType",      # Engine.Information.Engine.Type
  "Hybrid",          # Engine.Information.Hybrid
  "Gears",           # Engine.Information.Number.of.Forward.Gears
  "Transmission",    # Engine.Information.Transmission
  "CityMPG",         # Fuel.Information.City.mpg
  "FuelType",        # Fuel.Information.Fuel.Type
  "HighwayMPG",      # Fuel.Information.Highway.mpg
  "Classification",  # Identification.Classification
  "ID",              # Identification.ID
  "Make",            # Identification.Make
  "ModelYear",       # Identification.Model.Year
  "Year",            # Identification.Year
  "Horsepower",      # Engine.Information.Engine.Statistics.Horsepower
  "Torque"           # Engine.Information.Engine.Statistics.Torque
)
colnames(cars) <- new_colnames
```

```{r}
gasoline_cars <- filter(cars, FuelType == 'Gasoline')

```

## c.

```{r}
ggplot(gasoline_cars, aes(x = HighwayMPG)) +
  geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
  labs(title = "Distribution of Highway MPG for Gasoline Cars",
       x = "Highway MPG", y = "Frequency") + xlim(0, 50) +
  theme_minimal()
```

It seems that it skewed to the right, suggesting that take log transformation is necessary.

```{r}
gasoline_cars$LogHighwayMPG <- log(gasoline_cars$HighwayMPG)

ggplot(gasoline_cars, aes(x = LogHighwayMPG)) +
  geom_histogram(binwidth = 0.075, fill = "lightgreen", color = "black") +
  labs(
    title = "Distribution of Log-Transformed Highway MPG",
    x = "Log of Highway MPG",
    y = "Frequency"
  ) +
  theme_minimal()
```

After taking the log transformation, it seems that it follows approximately normal distribution.

## d.

```{r}
model1 <- lm(HighwayMPG ~ Torque + Horsepower + Length + Height + Width + as.factor(Year), , data = gasoline_cars)
summary(model1)
```

We observe a statistically significant positive relationship, where vehicles with higher horsepower are predicted to achieve better highway mileage on average.

## e.

```{r}
model2 <- lm(HighwayMPG ~ Torque*Horsepower + Length + Height + Width + as.factor(Year) , data = gasoline_cars)
summary(model2)
```

```{r}
options(repos = c(CRAN = "https://cran.rstudio.com/"))


install.packages("emmeans")
library(emmeans)

```

```{r}
emmip(model2, Torque ~ Horsepower, at = list(Horsepower = seq(100, 600, 100),
Torque = c(200, 300, 400)))
```

## f.

```{r}

gasoline_cars$Year <- as.factor(gasoline_cars$Year)

X <- model.matrix(HighwayMPG ~ Torque * Horsepower + Height + Length + Width + as.factor(Year), data = gasoline_cars)

y <- gasoline_cars$HighwayMPG

betahat <- solve(t(X) %*% X) %*% t(X) %*% y

mod <- lm(HighwayMPG ~ Torque * Horsepower + Height + Length + Width + as.factor(Year), data = gasoline_cars)

comparison <- cbind(Coefficients_lm = coef(mod), Coefficients_Manual = betahat)
rownames(comparison) <- names(coef(mod))
print(comparison)

```
